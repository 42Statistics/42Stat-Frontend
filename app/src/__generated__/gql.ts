/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation googleLogin($google: GoogleLoginInput!, $ftCode: String) {\n    googleLogin(google: $google, ftCode: $ftCode) {\n      __typename\n      ... on LoginSuccess {\n        message\n        accessToken\n        refreshToken\n        userId\n      }\n      ... on LoginNotLinked {\n        message\n      }\n    }\n  }\n": types.GoogleLoginDocument,
    "\n  query FindUserPreview($login: String!) {\n    findUserPreview(login: $login) {\n      id\n      login\n      imgUrl\n    }\n  }\n": types.FindUserPreviewDocument,
    "\n  query FindProjectPreview($name: String!) {\n    findProjectPreview(name: $name) {\n      id\n      name\n      url\n    }\n  }\n": types.FindProjectPreviewDocument,
    "\n  query GetMyProfile {\n    getPersonalGeneral {\n      userProfile {\n        id\n        login\n        imgUrl\n        displayname\n      }\n    }\n  }\n": types.GetMyProfileDocument,
    "\n  query GetEvalLogs(\n    $after: String\n    $first: Int!\n    $corrector: String\n    $corrected: String\n    $projectName: String\n    $outstandingOnly: Boolean\n    $sortOrder: EvalLogSortOrder!\n  ) {\n    getEvalLogs(\n      after: $after\n      first: $first\n      corrector: $corrector\n      corrected: $corrected\n      projectName: $projectName\n      outstandingOnly: $outstandingOnly\n      sortOrder: $sortOrder\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          header {\n            corrector {\n              id\n              login\n              imgUrl\n            }\n            teamPreview {\n              id\n              name\n              url\n            }\n            beginAt\n            projectPreview {\n              id\n              name\n              url\n            }\n            flag {\n              id\n              name\n              isPositive\n            }\n          }\n          correctorReview {\n            mark\n            review\n          }\n          correctedsReview {\n            mark\n            review\n          }\n        }\n      }\n      pageInfo {\n        totalCount\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n": types.GetEvalLogsDocument,
    "\n  mutation ftLogin($ftCode: String!) {\n    ftLogin(ftCode: $ftCode) {\n      message\n      accessToken\n      refreshToken\n      userId\n    }\n  }\n": types.FtLoginDocument,
    "\n  query GetHome {\n    getMyInfo {\n      ...getMyInfoFragment\n    }\n    getHomeUser {\n      ...homeUserFragment\n    }\n    getHomeEval {\n      ...homeEvalFragment\n    }\n    getHomeTeam {\n      ...homeTeamFragment\n    }\n    getHomeCoalition {\n      ...homeCoalitionFragment\n    }\n  }\n\n  fragment getMyInfoFragment on MyInfo {\n    userPreview {\n      id\n      login\n      imgUrl\n    }\n    recentValidatedTeam {\n      status\n      lastEventTime\n      projectPreview {\n        id\n        name\n        url\n      }\n    }\n    isNewMember\n    blackholedAt\n    experienceRank\n    scoreRank\n    evalCountRank\n  }\n\n  fragment homeUserFragment on HomeUser {\n    ...aliveUserCountRecordsFragment\n    ...averageDurationPerCircleFragment\n    ...blackholedCountPerCircleFragment\n    ...blackholedRateFragment\n    ...correctionPointRankingFragment\n    ...memberRateFragment\n    ...userCountPerLevelFragment\n    ...walletRankingFragment\n  }\n\n  fragment aliveUserCountRecordsFragment on HomeUser {\n    aliveUserCountRecords {\n      at\n      value\n    }\n  }\n\n  fragment averageDurationPerCircleFragment on HomeUser {\n    averageDurationPerCircle {\n      circle\n      value\n    }\n  }\n\n  fragment blackholedCountPerCircleFragment on HomeUser {\n    blackholedCountPerCircle {\n      circle\n      value\n    }\n  }\n\n  fragment blackholedRateFragment on HomeUser {\n    blackholedRate {\n      total\n      fields {\n        key\n        value\n      }\n    }\n  }\n\n  fragment correctionPointRankingFragment on HomeUser {\n    correctionPointRanking(limit: 5) {\n      userPreview {\n        id\n        login\n        imgUrl\n      }\n      value\n      rank\n    }\n  }\n\n  fragment memberRateFragment on HomeUser {\n    memberRate {\n      total\n      fields {\n        key\n        value\n      }\n    }\n  }\n\n  fragment userCountPerLevelFragment on HomeUser {\n    userCountPerLevel {\n      value\n      level\n    }\n  }\n\n  fragment walletRankingFragment on HomeUser {\n    walletRanking(limit: 5) {\n      userPreview {\n        id\n        login\n        imgUrl\n      }\n      value\n      rank\n    }\n  }\n\n  fragment homeEvalFragment on HomeEval {\n    averageCommentLength\n    averageFeedbackLength\n  }\n\n  fragment homeTeamFragment on HomeTeam {\n    ...currRegisteredCountRankingFragment\n    ...recentExamResultFragment\n  }\n\n  fragment currRegisteredCountRankingFragment on HomeTeam {\n    currRegisteredCountRanking(limit: 5) {\n      projectPreview {\n        id\n        name\n        url\n      }\n      rank\n      value\n    }\n  }\n\n  fragment recentExamResultFragment on HomeTeam {\n    recentExamResult(after: 1) {\n      start\n      end\n      data {\n        resultPerRank {\n          rank\n          rate {\n            total\n            fields {\n              key\n              value\n            }\n          }\n        }\n        beginAt\n        endAt\n        location\n        maxPeople\n        name\n        nbrSubscribers\n      }\n    }\n  }\n\n  fragment homeCoalitionFragment on HomeCoalition {\n    ...scoreRecordsPerCoalitionFragment\n    ...totalScoresPerCoalitionFragment\n  }\n\n  fragment scoreRecordsPerCoalitionFragment on HomeCoalition {\n    scoreRecordsPerCoalition {\n      coalition {\n        id\n        name\n        slug\n        imageUrl\n        coverUrl\n        color\n        score\n        userId\n      }\n      records {\n        at\n        value\n      }\n    }\n  }\n\n  fragment totalScoresPerCoalitionFragment on HomeCoalition {\n    totalScoresPerCoalition {\n      coalition {\n        id\n        name\n        slug\n        imageUrl\n        coverUrl\n        color\n        userId\n      }\n      value\n    }\n  }\n": types.GetHomeDocument,
    "\n  query GetTigCountPerCoalitionByDateTemplate($dateTemplate: DateTemplate!) {\n    getHomeCoalition {\n      tigCountPerCoalitionByDateTemplate(dateTemplate: $dateTemplate) {\n        data {\n          coalition {\n            id\n            name\n            slug\n            imageUrl\n            coverUrl\n            color\n            score\n            userId\n          }\n          value\n        }\n        start\n        end\n      }\n    }\n  }\n": types.GetTigCountPerCoalitionByDateTemplateDocument,
    "\n  query GetEvalCountByDateTemplate($dateTemplate: DateTemplate!) {\n    getHomeEval {\n      evalCountByDateTemplate(dateTemplate: $dateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n": types.GetEvalCountByDateTemplateDocument,
    "\n  query GetAverageEvalCountByDateTemplate($dateTemplate: DateTemplate!) {\n    getHomeEval {\n      averageEvalCountByDateTemplate(dateTemplate: $dateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n": types.GetAverageEvalCountByDateTemplateDocument,
    "\n  query GetCurrLastEvalCountByDateTemplate(\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getHomeEval {\n      currData: evalCountByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: evalCountByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n": types.GetCurrLastEvalCountByDateTemplateDocument,
    "\n  query GetBlackholedCountByDateTemplate(\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getHomeUser {\n      currData: blackholedCountByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: blackholedCountByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n": types.GetBlackholedCountByDateTemplateDocument,
    "\n  query GetLanding {\n    getLanding {\n      daysAfterBeginAt\n      aliveCount\n      blackholedCount\n      memberCount\n      evalCount\n      trendingProject {\n        projectPreview {\n          id\n          name\n          url\n        }\n        rank\n        value\n      }\n    }\n  }\n": types.GetLandingDocument,
    "\n  query GetLeaderboardCoalitionScore(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardScore {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n": types.GetLeaderboardCoalitionScoreDocument,
    "\n  query GetLeaderboardEvalCount(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardEvalCount {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n": types.GetLeaderboardEvalCountDocument,
    "\n  query GetLeaderboardExpIncrement(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardExpIncrement {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n": types.GetLeaderboardExpIncrementDocument,
    "\n  query GetLeaderboardLevel(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardLevel {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n": types.GetLeaderboardLevelDocument,
    "\n  query GetPersonalEvalByLogin($login: String!) {\n    getPersonalEval(login: $login) {\n      correctionPoint\n      totalCount\n      totalDuration\n      averageDuration\n      averageFinalMark\n      averageCommentLength\n      averageFeedbackLength\n      recentComment\n    }\n  }\n": types.GetPersonalEvalByLoginDocument,
    "\n  query GetEvalCountByDateTemplateByLogin(\n    $login: String!\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getPersonalEval(login: $login) {\n      currData: countByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: countByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n": types.GetEvalCountByDateTemplateByLoginDocument,
    "\n  query GetPersonalGeneralByLogin($login: String!) {\n    getPersonalGeneral(login: $login) {\n      beginAt\n      teamInfo {\n        lastPassed\n        lastRegistered\n      }\n      wallet\n      ...coalitionScoreFragment\n      blackholedAt\n      ...levelRecordsFragment\n      ...teamInfoFragment\n      ...characterFragment\n    }\n  }\n\n  fragment coalitionScoreFragment on PersonalGeneral {\n    userProfile {\n      coalition {\n        id\n        name\n        slug\n        imageUrl\n        coverUrl\n        color\n        score\n        userId\n      }\n    }\n    scoreInfo {\n      value\n      rankInCoalition\n    }\n  }\n\n  fragment levelRecordsFragment on PersonalGeneral {\n    userLevelRecords {\n      monthsPassed\n      level\n    }\n    promoLevelRecords {\n      monthsPassed\n      level\n    }\n    promoMemberLevelRecords {\n      monthsPassed\n      level\n    }\n  }\n\n  fragment characterFragment on PersonalGeneral {\n    character {\n      name\n      types {\n        name\n        description\n        color\n      }\n      imgUrl\n    }\n  }\n\n  fragment teamInfoFragment on PersonalGeneral {\n    teamInfo {\n      lastRegistered\n      lastPassed\n      teams {\n        id\n        name\n        occurrence\n        projectPreview {\n          id\n          name\n          url\n        }\n        status\n        lastEventTime\n        isValidated\n        finalMark\n      }\n    }\n  }\n": types.GetPersonalGeneralByLoginDocument,
    "\n  query GetLogtimeByDateTemplate(\n    $login: String!\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getPersonalGeneral(login: $login) {\n      currData: logtimeByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: logtimeByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n": types.GetLogtimeByDateTemplateDocument,
    "\n  query GetPreferredClusterByDateTemplateByLogin(\n    $login: String!\n    $dateTemplate: DateTemplate!\n  ) {\n    getPersonalGeneral(login: $login) {\n      preferredClusterByDateTemplate(dateTemplate: $dateTemplate) {\n        data {\n          name\n        }\n        start\n        end\n      }\n    }\n  }\n": types.GetPreferredClusterByDateTemplateByLoginDocument,
    "\n  query GetPrefferedTimeByDateTemplateByLogin(\n    $login: String!\n    $dateTemplate: DateTemplate!\n  ) {\n    getPersonalGeneral(login: $login) {\n      preferredTimeByDateTemplate(dateTemplate: $dateTemplate) {\n        data {\n          total\n          morning\n          daytime\n          evening\n          night\n        }\n        start\n        end\n      }\n    }\n  }\n": types.GetPrefferedTimeByDateTemplateByLoginDocument,
    "\n  query GetUserProfileByLogin($login: String!) {\n    getPersonalGeneral(login: $login) {\n      userProfile {\n        id\n        login\n        imgUrl\n        grade\n        displayname\n        coalition {\n          id\n          name\n          slug\n          imageUrl\n          coverUrl\n          color\n          score\n          userId\n        }\n        titles {\n          titleId\n          name\n          selected\n          createdAt\n          updatedAt\n        }\n        level\n      }\n    }\n  }\n": types.GetUserProfileByLoginDocument,
    "\n  query GetProjectInfoByProjectName($projectName: String!) {\n    getProjectInfo(projectName: $projectName) {\n      name\n      description\n      minUserCount\n      maxUserCount\n      estimateTime\n      difficulty\n      currRegisteredTeamCount\n      closedTeamCount\n      averagePassFinalMark\n      objectives\n      skills\n      ...validatedRateFragment\n    }\n  }\n\n  fragment validatedRateFragment on ProjectInfo {\n    validatedRate {\n      total\n      fields {\n        key\n        value\n      }\n    }\n  }\n": types.GetProjectInfoByProjectNameDocument,
    "\n  mutation DeleteAccount {\n    deleteAccount\n  }\n": types.DeleteAccountDocument,
    "\n  mutation LinkGoogle($google: GoogleLoginInput!) {\n    linkGoogle(google: $google) {\n      userId\n      linkedAccount {\n        linkedPlatform\n        id\n        email\n        linkedAt\n      }\n    }\n  }\n": types.LinkGoogleDocument,
    "\n  mutation UnlinkGoogle {\n    unlinkGoogle {\n      userId\n      linkedAccount {\n        linkedPlatform\n        id\n        email\n        linkedAt\n      }\n    }\n  }\n": types.UnlinkGoogleDocument,
    "\n  fragment AccountFields on Account {\n    userId\n    linkedAccount {\n      linkedPlatform\n      id\n      email\n      linkedAt\n    }\n  }\n": types.AccountFieldsFragmentDoc,
    "\n  query GetSetting {\n    getSetting {\n      account {\n        ...AccountFields\n      }\n    }\n  }\n": types.GetSettingDocument,
    "\n  mutation GetNewAccessToken($refreshToken: String!) {\n    refreshToken(refreshToken: $refreshToken) {\n      message\n      accessToken\n      refreshToken\n      userId\n    }\n  }\n": types.GetNewAccessTokenDocument,
    "\n  mutation Logout {\n    logout\n  }\n": types.LogoutDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation googleLogin($google: GoogleLoginInput!, $ftCode: String) {\n    googleLogin(google: $google, ftCode: $ftCode) {\n      __typename\n      ... on LoginSuccess {\n        message\n        accessToken\n        refreshToken\n        userId\n      }\n      ... on LoginNotLinked {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation googleLogin($google: GoogleLoginInput!, $ftCode: String) {\n    googleLogin(google: $google, ftCode: $ftCode) {\n      __typename\n      ... on LoginSuccess {\n        message\n        accessToken\n        refreshToken\n        userId\n      }\n      ... on LoginNotLinked {\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindUserPreview($login: String!) {\n    findUserPreview(login: $login) {\n      id\n      login\n      imgUrl\n    }\n  }\n"): (typeof documents)["\n  query FindUserPreview($login: String!) {\n    findUserPreview(login: $login) {\n      id\n      login\n      imgUrl\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindProjectPreview($name: String!) {\n    findProjectPreview(name: $name) {\n      id\n      name\n      url\n    }\n  }\n"): (typeof documents)["\n  query FindProjectPreview($name: String!) {\n    findProjectPreview(name: $name) {\n      id\n      name\n      url\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMyProfile {\n    getPersonalGeneral {\n      userProfile {\n        id\n        login\n        imgUrl\n        displayname\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMyProfile {\n    getPersonalGeneral {\n      userProfile {\n        id\n        login\n        imgUrl\n        displayname\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetEvalLogs(\n    $after: String\n    $first: Int!\n    $corrector: String\n    $corrected: String\n    $projectName: String\n    $outstandingOnly: Boolean\n    $sortOrder: EvalLogSortOrder!\n  ) {\n    getEvalLogs(\n      after: $after\n      first: $first\n      corrector: $corrector\n      corrected: $corrected\n      projectName: $projectName\n      outstandingOnly: $outstandingOnly\n      sortOrder: $sortOrder\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          header {\n            corrector {\n              id\n              login\n              imgUrl\n            }\n            teamPreview {\n              id\n              name\n              url\n            }\n            beginAt\n            projectPreview {\n              id\n              name\n              url\n            }\n            flag {\n              id\n              name\n              isPositive\n            }\n          }\n          correctorReview {\n            mark\n            review\n          }\n          correctedsReview {\n            mark\n            review\n          }\n        }\n      }\n      pageInfo {\n        totalCount\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEvalLogs(\n    $after: String\n    $first: Int!\n    $corrector: String\n    $corrected: String\n    $projectName: String\n    $outstandingOnly: Boolean\n    $sortOrder: EvalLogSortOrder!\n  ) {\n    getEvalLogs(\n      after: $after\n      first: $first\n      corrector: $corrector\n      corrected: $corrected\n      projectName: $projectName\n      outstandingOnly: $outstandingOnly\n      sortOrder: $sortOrder\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          header {\n            corrector {\n              id\n              login\n              imgUrl\n            }\n            teamPreview {\n              id\n              name\n              url\n            }\n            beginAt\n            projectPreview {\n              id\n              name\n              url\n            }\n            flag {\n              id\n              name\n              isPositive\n            }\n          }\n          correctorReview {\n            mark\n            review\n          }\n          correctedsReview {\n            mark\n            review\n          }\n        }\n      }\n      pageInfo {\n        totalCount\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ftLogin($ftCode: String!) {\n    ftLogin(ftCode: $ftCode) {\n      message\n      accessToken\n      refreshToken\n      userId\n    }\n  }\n"): (typeof documents)["\n  mutation ftLogin($ftCode: String!) {\n    ftLogin(ftCode: $ftCode) {\n      message\n      accessToken\n      refreshToken\n      userId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHome {\n    getMyInfo {\n      ...getMyInfoFragment\n    }\n    getHomeUser {\n      ...homeUserFragment\n    }\n    getHomeEval {\n      ...homeEvalFragment\n    }\n    getHomeTeam {\n      ...homeTeamFragment\n    }\n    getHomeCoalition {\n      ...homeCoalitionFragment\n    }\n  }\n\n  fragment getMyInfoFragment on MyInfo {\n    userPreview {\n      id\n      login\n      imgUrl\n    }\n    recentValidatedTeam {\n      status\n      lastEventTime\n      projectPreview {\n        id\n        name\n        url\n      }\n    }\n    isNewMember\n    blackholedAt\n    experienceRank\n    scoreRank\n    evalCountRank\n  }\n\n  fragment homeUserFragment on HomeUser {\n    ...aliveUserCountRecordsFragment\n    ...averageDurationPerCircleFragment\n    ...blackholedCountPerCircleFragment\n    ...blackholedRateFragment\n    ...correctionPointRankingFragment\n    ...memberRateFragment\n    ...userCountPerLevelFragment\n    ...walletRankingFragment\n  }\n\n  fragment aliveUserCountRecordsFragment on HomeUser {\n    aliveUserCountRecords {\n      at\n      value\n    }\n  }\n\n  fragment averageDurationPerCircleFragment on HomeUser {\n    averageDurationPerCircle {\n      circle\n      value\n    }\n  }\n\n  fragment blackholedCountPerCircleFragment on HomeUser {\n    blackholedCountPerCircle {\n      circle\n      value\n    }\n  }\n\n  fragment blackholedRateFragment on HomeUser {\n    blackholedRate {\n      total\n      fields {\n        key\n        value\n      }\n    }\n  }\n\n  fragment correctionPointRankingFragment on HomeUser {\n    correctionPointRanking(limit: 5) {\n      userPreview {\n        id\n        login\n        imgUrl\n      }\n      value\n      rank\n    }\n  }\n\n  fragment memberRateFragment on HomeUser {\n    memberRate {\n      total\n      fields {\n        key\n        value\n      }\n    }\n  }\n\n  fragment userCountPerLevelFragment on HomeUser {\n    userCountPerLevel {\n      value\n      level\n    }\n  }\n\n  fragment walletRankingFragment on HomeUser {\n    walletRanking(limit: 5) {\n      userPreview {\n        id\n        login\n        imgUrl\n      }\n      value\n      rank\n    }\n  }\n\n  fragment homeEvalFragment on HomeEval {\n    averageCommentLength\n    averageFeedbackLength\n  }\n\n  fragment homeTeamFragment on HomeTeam {\n    ...currRegisteredCountRankingFragment\n    ...recentExamResultFragment\n  }\n\n  fragment currRegisteredCountRankingFragment on HomeTeam {\n    currRegisteredCountRanking(limit: 5) {\n      projectPreview {\n        id\n        name\n        url\n      }\n      rank\n      value\n    }\n  }\n\n  fragment recentExamResultFragment on HomeTeam {\n    recentExamResult(after: 1) {\n      start\n      end\n      data {\n        resultPerRank {\n          rank\n          rate {\n            total\n            fields {\n              key\n              value\n            }\n          }\n        }\n        beginAt\n        endAt\n        location\n        maxPeople\n        name\n        nbrSubscribers\n      }\n    }\n  }\n\n  fragment homeCoalitionFragment on HomeCoalition {\n    ...scoreRecordsPerCoalitionFragment\n    ...totalScoresPerCoalitionFragment\n  }\n\n  fragment scoreRecordsPerCoalitionFragment on HomeCoalition {\n    scoreRecordsPerCoalition {\n      coalition {\n        id\n        name\n        slug\n        imageUrl\n        coverUrl\n        color\n        score\n        userId\n      }\n      records {\n        at\n        value\n      }\n    }\n  }\n\n  fragment totalScoresPerCoalitionFragment on HomeCoalition {\n    totalScoresPerCoalition {\n      coalition {\n        id\n        name\n        slug\n        imageUrl\n        coverUrl\n        color\n        userId\n      }\n      value\n    }\n  }\n"): (typeof documents)["\n  query GetHome {\n    getMyInfo {\n      ...getMyInfoFragment\n    }\n    getHomeUser {\n      ...homeUserFragment\n    }\n    getHomeEval {\n      ...homeEvalFragment\n    }\n    getHomeTeam {\n      ...homeTeamFragment\n    }\n    getHomeCoalition {\n      ...homeCoalitionFragment\n    }\n  }\n\n  fragment getMyInfoFragment on MyInfo {\n    userPreview {\n      id\n      login\n      imgUrl\n    }\n    recentValidatedTeam {\n      status\n      lastEventTime\n      projectPreview {\n        id\n        name\n        url\n      }\n    }\n    isNewMember\n    blackholedAt\n    experienceRank\n    scoreRank\n    evalCountRank\n  }\n\n  fragment homeUserFragment on HomeUser {\n    ...aliveUserCountRecordsFragment\n    ...averageDurationPerCircleFragment\n    ...blackholedCountPerCircleFragment\n    ...blackholedRateFragment\n    ...correctionPointRankingFragment\n    ...memberRateFragment\n    ...userCountPerLevelFragment\n    ...walletRankingFragment\n  }\n\n  fragment aliveUserCountRecordsFragment on HomeUser {\n    aliveUserCountRecords {\n      at\n      value\n    }\n  }\n\n  fragment averageDurationPerCircleFragment on HomeUser {\n    averageDurationPerCircle {\n      circle\n      value\n    }\n  }\n\n  fragment blackholedCountPerCircleFragment on HomeUser {\n    blackholedCountPerCircle {\n      circle\n      value\n    }\n  }\n\n  fragment blackholedRateFragment on HomeUser {\n    blackholedRate {\n      total\n      fields {\n        key\n        value\n      }\n    }\n  }\n\n  fragment correctionPointRankingFragment on HomeUser {\n    correctionPointRanking(limit: 5) {\n      userPreview {\n        id\n        login\n        imgUrl\n      }\n      value\n      rank\n    }\n  }\n\n  fragment memberRateFragment on HomeUser {\n    memberRate {\n      total\n      fields {\n        key\n        value\n      }\n    }\n  }\n\n  fragment userCountPerLevelFragment on HomeUser {\n    userCountPerLevel {\n      value\n      level\n    }\n  }\n\n  fragment walletRankingFragment on HomeUser {\n    walletRanking(limit: 5) {\n      userPreview {\n        id\n        login\n        imgUrl\n      }\n      value\n      rank\n    }\n  }\n\n  fragment homeEvalFragment on HomeEval {\n    averageCommentLength\n    averageFeedbackLength\n  }\n\n  fragment homeTeamFragment on HomeTeam {\n    ...currRegisteredCountRankingFragment\n    ...recentExamResultFragment\n  }\n\n  fragment currRegisteredCountRankingFragment on HomeTeam {\n    currRegisteredCountRanking(limit: 5) {\n      projectPreview {\n        id\n        name\n        url\n      }\n      rank\n      value\n    }\n  }\n\n  fragment recentExamResultFragment on HomeTeam {\n    recentExamResult(after: 1) {\n      start\n      end\n      data {\n        resultPerRank {\n          rank\n          rate {\n            total\n            fields {\n              key\n              value\n            }\n          }\n        }\n        beginAt\n        endAt\n        location\n        maxPeople\n        name\n        nbrSubscribers\n      }\n    }\n  }\n\n  fragment homeCoalitionFragment on HomeCoalition {\n    ...scoreRecordsPerCoalitionFragment\n    ...totalScoresPerCoalitionFragment\n  }\n\n  fragment scoreRecordsPerCoalitionFragment on HomeCoalition {\n    scoreRecordsPerCoalition {\n      coalition {\n        id\n        name\n        slug\n        imageUrl\n        coverUrl\n        color\n        score\n        userId\n      }\n      records {\n        at\n        value\n      }\n    }\n  }\n\n  fragment totalScoresPerCoalitionFragment on HomeCoalition {\n    totalScoresPerCoalition {\n      coalition {\n        id\n        name\n        slug\n        imageUrl\n        coverUrl\n        color\n        userId\n      }\n      value\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTigCountPerCoalitionByDateTemplate($dateTemplate: DateTemplate!) {\n    getHomeCoalition {\n      tigCountPerCoalitionByDateTemplate(dateTemplate: $dateTemplate) {\n        data {\n          coalition {\n            id\n            name\n            slug\n            imageUrl\n            coverUrl\n            color\n            score\n            userId\n          }\n          value\n        }\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTigCountPerCoalitionByDateTemplate($dateTemplate: DateTemplate!) {\n    getHomeCoalition {\n      tigCountPerCoalitionByDateTemplate(dateTemplate: $dateTemplate) {\n        data {\n          coalition {\n            id\n            name\n            slug\n            imageUrl\n            coverUrl\n            color\n            score\n            userId\n          }\n          value\n        }\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetEvalCountByDateTemplate($dateTemplate: DateTemplate!) {\n    getHomeEval {\n      evalCountByDateTemplate(dateTemplate: $dateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEvalCountByDateTemplate($dateTemplate: DateTemplate!) {\n    getHomeEval {\n      evalCountByDateTemplate(dateTemplate: $dateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAverageEvalCountByDateTemplate($dateTemplate: DateTemplate!) {\n    getHomeEval {\n      averageEvalCountByDateTemplate(dateTemplate: $dateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAverageEvalCountByDateTemplate($dateTemplate: DateTemplate!) {\n    getHomeEval {\n      averageEvalCountByDateTemplate(dateTemplate: $dateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCurrLastEvalCountByDateTemplate(\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getHomeEval {\n      currData: evalCountByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: evalCountByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCurrLastEvalCountByDateTemplate(\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getHomeEval {\n      currData: evalCountByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: evalCountByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBlackholedCountByDateTemplate(\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getHomeUser {\n      currData: blackholedCountByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: blackholedCountByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBlackholedCountByDateTemplate(\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getHomeUser {\n      currData: blackholedCountByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: blackholedCountByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLanding {\n    getLanding {\n      daysAfterBeginAt\n      aliveCount\n      blackholedCount\n      memberCount\n      evalCount\n      trendingProject {\n        projectPreview {\n          id\n          name\n          url\n        }\n        rank\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLanding {\n    getLanding {\n      daysAfterBeginAt\n      aliveCount\n      blackholedCount\n      memberCount\n      evalCount\n      trendingProject {\n        projectPreview {\n          id\n          name\n          url\n        }\n        rank\n        value\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLeaderboardCoalitionScore(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardScore {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLeaderboardCoalitionScore(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardScore {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLeaderboardEvalCount(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardEvalCount {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLeaderboardEvalCount(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardEvalCount {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLeaderboardExpIncrement(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardExpIncrement {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLeaderboardExpIncrement(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardExpIncrement {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLeaderboardLevel(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardLevel {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLeaderboardLevel(\n    $pageSize: Int!\n    $pageNumber: Int!\n    $dateTemplate: DateTemplate!\n  ) {\n    getLeaderboardLevel {\n      byDateTemplate(\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        dateTemplate: $dateTemplate\n      ) {\n        data {\n          me {\n            userPreview {\n              id\n              login\n              imgUrl\n            }\n            value\n            rank\n          }\n          totalRanking {\n            nodes {\n              userPreview {\n                id\n                login\n                imgUrl\n              }\n              value\n              rank\n            }\n            totalCount\n            pageSize\n            pageNumber\n          }\n        }\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPersonalEvalByLogin($login: String!) {\n    getPersonalEval(login: $login) {\n      correctionPoint\n      totalCount\n      totalDuration\n      averageDuration\n      averageFinalMark\n      averageCommentLength\n      averageFeedbackLength\n      recentComment\n    }\n  }\n"): (typeof documents)["\n  query GetPersonalEvalByLogin($login: String!) {\n    getPersonalEval(login: $login) {\n      correctionPoint\n      totalCount\n      totalDuration\n      averageDuration\n      averageFinalMark\n      averageCommentLength\n      averageFeedbackLength\n      recentComment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetEvalCountByDateTemplateByLogin(\n    $login: String!\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getPersonalEval(login: $login) {\n      currData: countByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: countByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEvalCountByDateTemplateByLogin(\n    $login: String!\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getPersonalEval(login: $login) {\n      currData: countByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: countByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPersonalGeneralByLogin($login: String!) {\n    getPersonalGeneral(login: $login) {\n      beginAt\n      teamInfo {\n        lastPassed\n        lastRegistered\n      }\n      wallet\n      ...coalitionScoreFragment\n      blackholedAt\n      ...levelRecordsFragment\n      ...teamInfoFragment\n      ...characterFragment\n    }\n  }\n\n  fragment coalitionScoreFragment on PersonalGeneral {\n    userProfile {\n      coalition {\n        id\n        name\n        slug\n        imageUrl\n        coverUrl\n        color\n        score\n        userId\n      }\n    }\n    scoreInfo {\n      value\n      rankInCoalition\n    }\n  }\n\n  fragment levelRecordsFragment on PersonalGeneral {\n    userLevelRecords {\n      monthsPassed\n      level\n    }\n    promoLevelRecords {\n      monthsPassed\n      level\n    }\n    promoMemberLevelRecords {\n      monthsPassed\n      level\n    }\n  }\n\n  fragment characterFragment on PersonalGeneral {\n    character {\n      name\n      types {\n        name\n        description\n        color\n      }\n      imgUrl\n    }\n  }\n\n  fragment teamInfoFragment on PersonalGeneral {\n    teamInfo {\n      lastRegistered\n      lastPassed\n      teams {\n        id\n        name\n        occurrence\n        projectPreview {\n          id\n          name\n          url\n        }\n        status\n        lastEventTime\n        isValidated\n        finalMark\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPersonalGeneralByLogin($login: String!) {\n    getPersonalGeneral(login: $login) {\n      beginAt\n      teamInfo {\n        lastPassed\n        lastRegistered\n      }\n      wallet\n      ...coalitionScoreFragment\n      blackholedAt\n      ...levelRecordsFragment\n      ...teamInfoFragment\n      ...characterFragment\n    }\n  }\n\n  fragment coalitionScoreFragment on PersonalGeneral {\n    userProfile {\n      coalition {\n        id\n        name\n        slug\n        imageUrl\n        coverUrl\n        color\n        score\n        userId\n      }\n    }\n    scoreInfo {\n      value\n      rankInCoalition\n    }\n  }\n\n  fragment levelRecordsFragment on PersonalGeneral {\n    userLevelRecords {\n      monthsPassed\n      level\n    }\n    promoLevelRecords {\n      monthsPassed\n      level\n    }\n    promoMemberLevelRecords {\n      monthsPassed\n      level\n    }\n  }\n\n  fragment characterFragment on PersonalGeneral {\n    character {\n      name\n      types {\n        name\n        description\n        color\n      }\n      imgUrl\n    }\n  }\n\n  fragment teamInfoFragment on PersonalGeneral {\n    teamInfo {\n      lastRegistered\n      lastPassed\n      teams {\n        id\n        name\n        occurrence\n        projectPreview {\n          id\n          name\n          url\n        }\n        status\n        lastEventTime\n        isValidated\n        finalMark\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLogtimeByDateTemplate(\n    $login: String!\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getPersonalGeneral(login: $login) {\n      currData: logtimeByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: logtimeByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLogtimeByDateTemplate(\n    $login: String!\n    $currDateTemplate: DateTemplate!\n    $lastDateTemplate: DateTemplate!\n  ) {\n    getPersonalGeneral(login: $login) {\n      currData: logtimeByDateTemplate(dateTemplate: $currDateTemplate) {\n        data\n        start\n        end\n      }\n      lastData: logtimeByDateTemplate(dateTemplate: $lastDateTemplate) {\n        data\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPreferredClusterByDateTemplateByLogin(\n    $login: String!\n    $dateTemplate: DateTemplate!\n  ) {\n    getPersonalGeneral(login: $login) {\n      preferredClusterByDateTemplate(dateTemplate: $dateTemplate) {\n        data {\n          name\n        }\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPreferredClusterByDateTemplateByLogin(\n    $login: String!\n    $dateTemplate: DateTemplate!\n  ) {\n    getPersonalGeneral(login: $login) {\n      preferredClusterByDateTemplate(dateTemplate: $dateTemplate) {\n        data {\n          name\n        }\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPrefferedTimeByDateTemplateByLogin(\n    $login: String!\n    $dateTemplate: DateTemplate!\n  ) {\n    getPersonalGeneral(login: $login) {\n      preferredTimeByDateTemplate(dateTemplate: $dateTemplate) {\n        data {\n          total\n          morning\n          daytime\n          evening\n          night\n        }\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPrefferedTimeByDateTemplateByLogin(\n    $login: String!\n    $dateTemplate: DateTemplate!\n  ) {\n    getPersonalGeneral(login: $login) {\n      preferredTimeByDateTemplate(dateTemplate: $dateTemplate) {\n        data {\n          total\n          morning\n          daytime\n          evening\n          night\n        }\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserProfileByLogin($login: String!) {\n    getPersonalGeneral(login: $login) {\n      userProfile {\n        id\n        login\n        imgUrl\n        grade\n        displayname\n        coalition {\n          id\n          name\n          slug\n          imageUrl\n          coverUrl\n          color\n          score\n          userId\n        }\n        titles {\n          titleId\n          name\n          selected\n          createdAt\n          updatedAt\n        }\n        level\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserProfileByLogin($login: String!) {\n    getPersonalGeneral(login: $login) {\n      userProfile {\n        id\n        login\n        imgUrl\n        grade\n        displayname\n        coalition {\n          id\n          name\n          slug\n          imageUrl\n          coverUrl\n          color\n          score\n          userId\n        }\n        titles {\n          titleId\n          name\n          selected\n          createdAt\n          updatedAt\n        }\n        level\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProjectInfoByProjectName($projectName: String!) {\n    getProjectInfo(projectName: $projectName) {\n      name\n      description\n      minUserCount\n      maxUserCount\n      estimateTime\n      difficulty\n      currRegisteredTeamCount\n      closedTeamCount\n      averagePassFinalMark\n      objectives\n      skills\n      ...validatedRateFragment\n    }\n  }\n\n  fragment validatedRateFragment on ProjectInfo {\n    validatedRate {\n      total\n      fields {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProjectInfoByProjectName($projectName: String!) {\n    getProjectInfo(projectName: $projectName) {\n      name\n      description\n      minUserCount\n      maxUserCount\n      estimateTime\n      difficulty\n      currRegisteredTeamCount\n      closedTeamCount\n      averagePassFinalMark\n      objectives\n      skills\n      ...validatedRateFragment\n    }\n  }\n\n  fragment validatedRateFragment on ProjectInfo {\n    validatedRate {\n      total\n      fields {\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteAccount {\n    deleteAccount\n  }\n"): (typeof documents)["\n  mutation DeleteAccount {\n    deleteAccount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation LinkGoogle($google: GoogleLoginInput!) {\n    linkGoogle(google: $google) {\n      userId\n      linkedAccount {\n        linkedPlatform\n        id\n        email\n        linkedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LinkGoogle($google: GoogleLoginInput!) {\n    linkGoogle(google: $google) {\n      userId\n      linkedAccount {\n        linkedPlatform\n        id\n        email\n        linkedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UnlinkGoogle {\n    unlinkGoogle {\n      userId\n      linkedAccount {\n        linkedPlatform\n        id\n        email\n        linkedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UnlinkGoogle {\n    unlinkGoogle {\n      userId\n      linkedAccount {\n        linkedPlatform\n        id\n        email\n        linkedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AccountFields on Account {\n    userId\n    linkedAccount {\n      linkedPlatform\n      id\n      email\n      linkedAt\n    }\n  }\n"): (typeof documents)["\n  fragment AccountFields on Account {\n    userId\n    linkedAccount {\n      linkedPlatform\n      id\n      email\n      linkedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSetting {\n    getSetting {\n      account {\n        ...AccountFields\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSetting {\n    getSetting {\n      account {\n        ...AccountFields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation GetNewAccessToken($refreshToken: String!) {\n    refreshToken(refreshToken: $refreshToken) {\n      message\n      accessToken\n      refreshToken\n      userId\n    }\n  }\n"): (typeof documents)["\n  mutation GetNewAccessToken($refreshToken: String!) {\n    refreshToken(refreshToken: $refreshToken) {\n      message\n      accessToken\n      refreshToken\n      userId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Logout {\n    logout\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;